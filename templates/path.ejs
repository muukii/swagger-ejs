<% "use strict"; -%>
<% 
function protocol(method) {
  if (method == 'get') {
    return "GETRequestType"
  }
  if (method == 'post') {
    return "POSTRequestType"
  }
  if (method == 'put') {
    return "PUTRequestType"
  }
  if (method == 'delete') {
    return "DELETERequestType"
  }
}

function toSwiftType(parameter) {
 
  
  var commonNameMapping = {
    'integer' : 'Int32',
    'long' : 'Int64',
    'float' : 'Float',
    'double' : 'Double',
    'string' : 'String',
    'byte' : 'String',
    'binary' : 'String',
    'boolean' : 'Bool',
    'date' : 'NSDate',
    'dateTime' : 'NSDate',
    'password' : 'String'
  }
  
  var nameMapping = {
    'integer_int32' : 'Int32',
    'integer_int64' : 'Int64',
    'number_float' : 'Float',
    'number_double' : 'Double',
    'string' : 'String',
    'boolean' : 'Bool',
    'string' : 'date',
    'string' : 'date-time'
  }
  
  var typeString = ""
  
  if (parameter.type && parameter.format) {
    var key = parameter.type + '_' + parameter.format
    typeString = nameMapping[key] 
  }
  
  if (parameter.type) {
    var key = parameter.type
    typeString = commonNameMapping[key]
  }   
  return typeString
}

function toSwiftPrameter(parameter) {
  var name = parameter.name
  var typeString = toSwiftType(parameter)  
  var optional
  if (parameter.required) {
    optional = ''
  } else {
    optional = '?'
  }
  
  return 'let ' + name + ': ' + typeString + optional  
}

function toSwiftArg(parameter) {
  var name = parameter.name
  var typeString = toSwiftType(parameter)  
  var optional
  if (parameter.required) {
    optional = ''
  } else {
    optional = '?'
  }
  
  return name + ': ' + typeString + optional  
}

function toSwiftPath() {
  
}
-%>
//
//  <%= name + ".swift" %>
//
//  Created by SwaggerGen
//

import Foundation
import SwiftyJSON

public struct <%= name %>: RequestContextType, <%= protocol(method) %>, APISessionRequestType, JSONResponseType {
<% methodObject.parameters.forEach((parameter) => { -%>    
    <%= toSwiftPrameter(parameter) -%>
<% }) %>

    public var path: String {
<% var pathParameters = methodObject.parameters.filter((value) => { return value.in == 'path' }) -%>  
<% if (pathParameters.length > 0) { -%>
        var path = "<%= path -%>"
<% for (key in pathParameters) { -%>
<% var pathParameter = pathParameters[key] -%>
        path = path.stringByReplacingOccurrencesOfString("{<%= pathParameter.name -%>}", withString: "\(self.<%= pathParameter.name -%>)", options: .LiteralSearch, range: nil)
<% } -%>
        return path
<% } else { -%>
        return "<%= path -%>"
<% } -%>
    }
    
    public var parameterJSON: JSON {
        var params = [String: JSON]()
<% var queryParameters = methodObject.parameters.filter((value) => { return value.in == 'query' }) -%>
<% queryParameters.forEach((query) => { -%>
        params["<%= query.name -%>"] = JSON(self.<%= query.name -%>)
<% }) -%>
        return params
    }
    
    public init(<%= methodObject.parameters.map((parameter) => { return toSwiftArg(parameter)}).join(', ') -%>) {
<% methodObject.parameters.forEach((parameter) => { -%>
        self.<%= parameter.name -%> = <%= parameter.name -%> 
<% }) -%>
    }
    
    public func send() -> Observable(JSON) {
        return self.resume()
    }
}

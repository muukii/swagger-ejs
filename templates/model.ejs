//
//  <%= name + ".swift" %>
//
//  Created by SwaggerGen
//

import Foundation
import SwiftyJSON

public struct <%= model .classname %>: _InitializableFromJSON, _EncodableToJSON {
    
<%
    model.vars.forEach((v) => {
        if (v.isEnum) {
-%>
    public enum <%= v.datatypeWithEnum %>: String, _InitializableFromJSON, _EncodableToJSON {
<%
        v.allowableValues.values.forEach((val) => {
-%>
        case <%= val.enum %> = "<%= val.raw  %>"
<%
        })
-%>

        public init(json: JSON) throws {
            let rawValue = try json.get<%= v.datatype %>()
            guard let value = <%= v.datatypeWithEnum %>(rawValue: rawValue) else {
                throw AppRequestError.EnumNotMatched(enumName: "<%= v.datatypeWithEnum %>", rawValue: rawValue)
            }
            self = value            
        }

        func toJSON() -> JSON {
            return JSON(self.rawValue)
        }        
    }
<%
        }
    })

    model.vars.forEach((v) => {
-%>
    <% if (v.description) { %>/** <%= description %> */<% } %>
<%
        if (v.isEnum) {
-%>
    public var <%= v.name %>: <%= v.datatypeWithEnum %><%= v.required ? '' : '?' %><% if (v.defaultValue) { %> = <%= v.defaultValue %><% } -%>
<%
        } else {
-%>
    public var <%= v.name %>: <%= v.datatype %><%= v.required ? '' : '?' %><% if (v.defaultValue) { %> = <%= v.defaultValue %><% } -%>
<%
        }
    })
-%>


    public init(json: JSON) throws {
<%
    model.vars.forEach((v) => {
        if (v.isContainer) {
            if (v.isRequired) {
                if (v.isPrimitiveType) {
-%>
        self.<%= v.name %> = try json["<%= baseName %>"].get<%= v.items.baseType %>Array()
<%
                } else {
-%>
        self.<%= v.name %> = try json["<%= baseName %>"].getObjects(<%= v.complexType %>)
<%
                }
            } else {
                if (v.isPrimitiveType) {
-%>
        self.<%= v.name %> = json["<%= v.baseName %>"].getOptional<%= v.items.baseType %>Array()
<%
                } else {
-%>
        self.<%= v.name %> = try json["<%= v.baseName %>"].getOptionalObjects(<%= v.complexType %>)
<%
                }
            }
        } else {
            if (v.isRequired) {
                if (v.isPrimitiveType) {
                    if (v.isEnum) {
-%>
        self.<%= v.name %> = json["<%= v.baseName %>"].getObject(<%= v.datatypeWithEnum %>)
<%
                    } else {
-%>
        self.<%= v.name %> = try json["<%= v.baseName %>"].get<%= v.datatype %>()
<%
                    }
                } else {
-%>
        self.<%= v.name %> = json["<%= v.baseName %>"].getObject(<%= v.complexType %>)
<%
                }
            } else {
                if (v.isPrimitiveType) {
                    if (v.isEnum) {
-%>
        self.<%= v.name %> = try json["<%= v.baseName %>"].getOptionalObject(<%= v.datatypeWithEnum %>)
<%
                    } else {
-%>
        self.<%= v.name %> = json["<%= v.baseName %>"].getOptional<%= v.datatype %>()
<%
                    }
                } else {
-%>
        self.<%= v.name %> = try json["<%= v.baseName %>"].getOptionalObject(<%= v.complexType %>)
<%
                }
            }
        }
    });
-%>
    }

    public init(
<%
    model.vars.forEach((v) => {
        if (v.isEnum) {
-%>
        <%= v.name %>: <%= v.datatypeWithEnum %><%= v.required ? '' : '?' %><% if (v.defaultValue) { %> = <%= v.defaultValue %><% } -%>
<%
        } else {
-%>
        <%= v.name %>: <%= v.datatype %><%= v.required ? '' : '?' %><% if (v.defaultValue) { %> = <%= v.defaultValue %><% } -%>
<%
        }
-%>
<%= v.hasMore ? ',' : '' %>
<%
    })
-%>
    ) {
<%
    model.vars.forEach((v) => {
-%>
        self.<%= v.name %> = <%= v.name %>
<%
    })
-%>
    }

    public func toJSON() -> JSON {
        
        var json = [String: JSON]()

<%
    model.vars.forEach((v) => {
        if (v.isContainer) {
            if (v.required) {
-%>
        json["<%= v.baseName %>"] = JSON(self.<%= v.name %>.map {
<%
                if (v.isPrimitiveType) {
-%>
        <%= v.isEnum ? '$0.toJSON()' : 'JSON($0)' %>
<%
                } else {
-%>
        $0.toJSON()
<%
                }
-%>
        })
<%
            } else { // if (v.required)
-%>
        if let value = self.<%= v.name %> {
            json["<%= v.baseName %>"] = JSON(value.map {
<%
                if (v.isPrimitiveType) {
-%>
                <%= v.isEnum ? '$0.toJSON()' : 'JSON($0)' %>
<%
                } else {
-%>
                $0.toJSON()
<%
                }
-%>
            })
        } else {
            json["<%= v.baseName %>"] = JSON(NSNull())
        }
<%
            }  // if (v.required)
        } else { // if (v.isContainer)
            if (v.required) {
-%>
        json["<%= baseName %>"] = <% -%>
<% 
                if (v.isPrimitiveType) {
-%>
<%= v.isEnum ? 'self.'+v.name+'.toJSON()' : 'JSON(self.'+v.name+')' %>
<%
                } else {
-%>
self.<%= v.name %>.toJSON()
<%
                }
            } else { // if (v.required)
-%>
        if let value = self.<%= v.name %> {
            json["<%= v.baseName %>"] = <% -%>
<%
                if (v.isPrimitiveType) {
-%>
<%= v.isEnum ? 'value.toJSON()' : 'JSON(value)' %>
<%
                } else {
-%>
value.toJSON()
<%
                }
-%>
        } else {
            json["<%= v.baseName %>"] = JSON(NSNull())
        }
<%
            }  // if (v.required)
        } // if (v.isContainer)
    })
-%>
        
        return JSON(json)
    }
}

<%



function getJSONGetter(v) {
    
  var datatype = v.datatype
  
  if (v.complexType) {
    
    if (v.baseType == 'Array') {
      return "getObject(" + v.complexType + ")"
    } else {
      return "getObjects(" + v.complexType + ")"
    }
  }
  
  switch (datatype) {
    case 'String':
      return 'getString()'
      break
    case 'Int':
      return 'getInt()'
      break
    case 'Int32':
      return 'getInt32()'
      break
    case 'Int64':
      return 'getInt64()'
      break
    case 'Double':
      return 'getDouble()'
      break
    case 'Float':
      return 'getFloat()'
      break
    case 'Bool':
      return 'getBool()'
      break
    case 'NSDate':
      return 'getNSDate()'
      break   
  }
  return dataType
}
%>

<%# Example JSON
{
  "importPath": "/Models.UserLinks",
  "model": {
    "name": "UserLinks",
    "classname": "UserLinks",
    "classVarName": "userLinks",
    "modelJson": "{\n  \"type\" : \"object\",\n  \"properties\" : {\n    \"self\" : {\n      \"type\" : \"string\"\n    },\n    \"html\" : {\n      \"type\" : \"string\"\n    },\n    \"photos\" : {\n      \"type\" : \"string\"\n    },\n    \"likes\" : {\n      \"type\" : \"string\"\n    }\n  }\n}",
    "classFilename": "UserLinks",
    "vars": [
      {
        "baseName": "self",
        "getter": "getSelf",
        "setter": "setSelf",
        "datatype": "String",
        "datatypeWithEnum": "String",
        "name": "_self",
        "defaultValueWithParam": " = data.self;",
        "baseType": "String",
        "example": "null",
        "jsonSchema": "{\n  \"type\" : \"string\"\n}",
        "hasMore": true,
        "hasMoreNonReadOnly": true,
        "isPrimitiveType": true,
        "isNotContainer": true,
        "isString": true,
        "isEnum": false,
        "vendorExtensions": {}
      },
      {
        "baseName": "html",
        "getter": "getHtml",
        "setter": "setHtml",
        "datatype": "String",
        "datatypeWithEnum": "String",
        "name": "html",
        "defaultValueWithParam": " = data.html;",
        "baseType": "String",
        "example": "null",
        "jsonSchema": "{\n  \"type\" : \"string\"\n}",
        "hasMore": true,
        "hasMoreNonReadOnly": true,
        "isPrimitiveType": true,
        "isNotContainer": true,
        "isString": true,
        "isEnum": false,
        "vendorExtensions": {}
      },
      {
        "baseName": "photos",
        "getter": "getPhotos",
        "setter": "setPhotos",
        "datatype": "String",
        "datatypeWithEnum": "String",
        "name": "photos",
        "defaultValueWithParam": " = data.photos;",
        "baseType": "String",
        "example": "null",
        "jsonSchema": "{\n  \"type\" : \"string\"\n}",
        "hasMore": true,
        "hasMoreNonReadOnly": true,
        "isPrimitiveType": true,
        "isNotContainer": true,
        "isString": true,
        "isEnum": false,
        "vendorExtensions": {}
      },
      {
        "baseName": "likes",
        "getter": "getLikes",
        "setter": "setLikes",
        "datatype": "String",
        "datatypeWithEnum": "String",
        "name": "likes",
        "defaultValueWithParam": " = data.likes;",
        "baseType": "String",
        "example": "null",
        "jsonSchema": "{\n  \"type\" : \"string\"\n}",
        "isPrimitiveType": true,
        "isNotContainer": true,
        "isString": true,
        "isEnum": false,
        "vendorExtensions": {}
      }
    ],
    "allVars": [
      {
        "baseName": "self",
        "getter": "getSelf",
        "setter": "setSelf",
        "datatype": "String",
        "datatypeWithEnum": "String",
        "name": "_self",
        "defaultValueWithParam": " = data.self;",
        "baseType": "String",
        "example": "null",
        "jsonSchema": "{\n  \"type\" : \"string\"\n}",
        "hasMore": true,
        "hasMoreNonReadOnly": true,
        "isPrimitiveType": true,
        "isNotContainer": true,
        "isString": true,
        "isEnum": false,
        "vendorExtensions": {}
      },
      {
        "baseName": "html",
        "getter": "getHtml",
        "setter": "setHtml",
        "datatype": "String",
        "datatypeWithEnum": "String",
        "name": "html",
        "defaultValueWithParam": " = data.html;",
        "baseType": "String",
        "example": "null",
        "jsonSchema": "{\n  \"type\" : \"string\"\n}",
        "hasMore": true,
        "hasMoreNonReadOnly": true,
        "isPrimitiveType": true,
        "isNotContainer": true,
        "isString": true,
        "isEnum": false,
        "vendorExtensions": {}
      },
      {
        "baseName": "photos",
        "getter": "getPhotos",
        "setter": "setPhotos",
        "datatype": "String",
        "datatypeWithEnum": "String",
        "name": "photos",
        "defaultValueWithParam": " = data.photos;",
        "baseType": "String",
        "example": "null",
        "jsonSchema": "{\n  \"type\" : \"string\"\n}",
        "hasMore": true,
        "hasMoreNonReadOnly": true,
        "isPrimitiveType": true,
        "isNotContainer": true,
        "isString": true,
        "isEnum": false,
        "vendorExtensions": {}
      },
      {
        "baseName": "likes",
        "getter": "getLikes",
        "setter": "setLikes",
        "datatype": "String",
        "datatypeWithEnum": "String",
        "name": "likes",
        "defaultValueWithParam": " = data.likes;",
        "baseType": "String",
        "example": "null",
        "jsonSchema": "{\n  \"type\" : \"string\"\n}",
        "isPrimitiveType": true,
        "isNotContainer": true,
        "isString": true,
        "isEnum": false,
        "vendorExtensions": {}
      }
    ],
    "mandatory": [],
    "allMandatory": [],
    "imports": [],
    "hasVars": true,
    "hasEnums": false,
    "vendorExtensions": {}
  }
}
%>